diff --git a/deps/uv/src/win/util.c b/deps/uv/src/win/util.c
index 5cda078a55..6cf2e6c1f7 100644
--- a/deps/uv/src/win/util.c
+++ b/deps/uv/src/win/util.c
@@ -505,6 +515,7 @@ int uv_get_process_title(char* buffer, size_t size) {
 }
 
 
+typedef VOID(WINAPI* FnGetSystemTimePreciseAsFileTime)(LPFILETIME);
 /* https://github.com/libuv/libuv/issues/1674 */
 int uv_clock_gettime(uv_clock_id clock_id, uv_timespec64_t* ts) {
   FILETIME ft;
@@ -513,6 +524,16 @@ int uv_clock_gettime(uv_clock_id clock_id, uv_timespec64_t* ts) {
   if (ts == NULL)
     return UV_EFAULT;
 
+  FnGetSystemTimePreciseAsFileTime precise_time_function = NULL;
+  HMODULE module = GetModuleHandleW(L"kernel32.dll");
+  if (module != NULL) {
+    precise_time_function = (FnGetSystemTimePreciseAsFileTime)GetProcAddress(
+        module, "GetSystemTimePreciseAsFileTime");
+  }
+
+  if (precise_time_function == NULL) {
+    precise_time_function = GetSystemTimeAsFileTime;
+  }
   switch (clock_id) {
     case UV_CLOCK_MONOTONIC:
       uv__once_init();
@@ -521,7 +542,7 @@ int uv_clock_gettime(uv_clock_id clock_id, uv_timespec64_t* ts) {
       ts->tv_nsec = t % 1000000000;
       return 0;
     case UV_CLOCK_REALTIME:
-      GetSystemTimePreciseAsFileTime(&ft);
+      precise_time_function(&ft);
       /* In 100-nanosecond increments from 1601-01-01 UTC because why not? */
       t = (int64_t) ft.dwHighDateTime << 32 | ft.dwLowDateTime;
       /* Convert to UNIX epoch, 1970-01-01. Still in 100 ns increments. */
